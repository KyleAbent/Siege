-- ======= Copyright (c) 2003-2011, Unknown Worlds Entertainment, Inc. All rights reserved. =======
--
-- lua\Infestation.lua
--
--    Created by:   Andreas Urwalek (andi@unknownworlds.com)
--
--    Patch of infestation generated by hives or cysts.
--
-- ========= For more information, visit us at http://www.unknownworlds.com =====================

PrecacheAsset("materials/infestation/infestation_decal.surface_shader")
PrecacheAsset("materials/infestation/infestation_shell.surface_shader")
PrecacheAsset("materials/infestation/Infestation.surface_shader")
PrecacheAsset("models/alien/infestation/infestation_shell.model")
PrecacheAsset("models/alien/infestation/infestation_blob.model")

Script.Load("lua/InfestationCache.lua")

local kInfestationDecalMaterial = PrecacheAsset("materials/infestation/infestation_decal.material")

local gInfestationSet           = unique_set()
local gDirtyInfestationQueue    = unique_queue()
local gInfestationQuality

class 'Infestation'

local kMaxRadius = kInfestationRadius

function CreateStructureInfestation(parent, coords, teamNumber, infestationRadius, blobMultiplier)

    local infestation = Infestation()
    infestation:Initialize()
    infestation:SetCoords(coords)    
    infestation:SetMaxRadius(infestationRadius)
    infestation:SetBlobMultiplier(blobMultiplier)
    
    return infestation
    
end

local function DestroyClientGeometry(self)

    if self.infestationModelArray ~= nil then
        Client.DestroyRenderModelArray(self.infestationModelArray)
        self.infestationModelArray = nil
    end

    if self.infestationShellModelArray ~= nil then
        Client.DestroyRenderModelArray(self.infestationShellModelArray)
        self.infestationShellModelArray = nil
    end
    
    if self.infestationDecals ~= nil then
        for i=1,#self.infestationDecals do
            Client.DestroyRenderDecal(self.infestationDecals[i])
        end
        self.infestationDecals = nil
    end
  
    self.hasClientGeometry = false

end


function CreateInfestationModelArray(modelName, blobCoords, origin, radiusScale, radiusScale2 )

    local modelArray

    if #blobCoords > 0 then
            
        local coordsArray = { }
        local numModels = 0
        
        for _, coords in ipairs(blobCoords) do

            local c  = Coords()
            c.xAxis  = coords.xAxis  * radiusScale
            c.yAxis  = coords.yAxis  * radiusScale2
            c.zAxis  = coords.zAxis  * radiusScale
            c.origin = coords.origin - coords.yAxis * 0.3
            
            numModels = numModels + 1
            coordsArray[numModels] = c
            
        end
        
        if numModels > 0 then

            modelArray = Client.CreateRenderModelArray(RenderScene.Zone_Default, numModels)
            modelArray:SetCastsShadows(false)
            modelArray:InstanceMaterials()

            modelArray:SetModel(modelName)
            modelArray:SetModels( coordsArray )

        end
        
    end
    
    return modelArray

end

function CreateModelArrays(self)
    
    -- Make blobs on the ground thinner to so that Skulks and buildings aren't
    -- obscured.
    local scale = 1
    if self.coords.yAxis.y > 0.5 then
        scale = 0.75
    end
    
    local origin = self.coords.origin

    if gInfestationQuality == "rich" then
        self.infestationModelArray = CreateInfestationModelArray( "models/alien/infestation/infestation_blob.model", self.blobCoords, origin, 1, 1 * scale )
    end
    self.infestationShellModelArray = CreateInfestationModelArray( "models/alien/infestation/infestation_shell.model", self.blobCoords, origin, 1.75, 1.25 * scale )
    
end

local function CreateClientGeometry(self)

    CreateModelArrays(self)
    
    self.qualityLoaded = gInfestationQuality
    self.hasClientGeometry = true
    
end

function Infestation:Initialize()

    self.radius = 0
    self.lastRadius = 0
    self.cloakFraction = 0
    self.lastCloakFraction = 0
    self.visible = false
    self.blobMultiplier = 1
    
    self.maxRadius = kMaxRadius
    self.blobCoords = {}

    if Client then
    
        self.infestationMaterial = Client.CreateRenderMaterial()
        self.infestationMaterial:SetMaterial(kInfestationDecalMaterial)
    
    end
    
    self.destroyed = false
    
    gDirtyInfestationQueue:Enqueue(self)
    gInfestationSet:Insert(self)
 
end

function Infestation:Uninitialize()

    if Client then
    
        DestroyClientGeometry(self)
    
        if self.infestationMaterial then
        
            Client.DestroyRenderMaterial(self.infestationMaterial)
            self.infestationMaterial = nil
        
        end
        
        self.destroyed = true
    
    end
    
    gInfestationSet:Remove(self)
    
end

function Infestation:SetBlobMultiplier(multiplier)
    self.blobMultiplier = multiplier
end

function Infestation:SetIsVisible(visible)

    if self.visible ~= visible then
        
        gDirtyInfestationQueue:Enqueue(self)
        self.visible = visible
        
    end

end

function Infestation:GetIsVisible()
    return self.visible
end

function Infestation:SetCoords(coords)
    self.coords = Coords(coords)
    gDirtyInfestationQueue:Enqueue(self)
end

function Infestation:GetCoords()
    return self.coords
end

function Infestation:GetRadius()    
    return self.radius    
end

function Infestation:SetRadius(radius)

    if self.radius ~= radius then

        self.radius = radius
        gDirtyInfestationQueue:Enqueue(self)
    
    end
    
end

function Infestation:SetCloakFraction(cloakFraction)

    if self.cloakFraction ~= cloakFraction then
        
        self.cloakFraction = cloakFraction or 0
        
        -- this change is not interesting for the server
        if Client then
            gDirtyInfestationQueue:Enqueue(self)
        end
    
    end

end

function Infestation:SetMaxRadius(radius)
    self.maxRadius = radius
end

function Infestation:GetMaxRadius()
    return self.maxRadius
end

function Infestation:GenerateBlobs()

    assert(self.coords)
    
    -- generate the blobs, use cached blobs if exist
    table.copy(gInfestationCache:GetBlobCoords(self), self.blobCoords)
    
end

local function SetMaterialParameters(modelArray, radiusFraction, origin, maxRadius)

    modelArray:SetMaterialParameter("amount", radiusFraction)
    modelArray:SetMaterialParameter("origin", origin)
    modelArray:SetMaterialParameter("maxRadius", maxRadius)

end


-- only called when the infestation actually changed
function Infestation:RenderInfestation(generateBlobs)

    PROFILE("Infestation:RenderInfestation")
    
    if #self.blobCoords == 0 then
    
        if generateBlobs then
            self:GenerateBlobs()
        else
            return false
        end
    
    end
    
    local qualityChanged = self.qualityLoaded ~= gInfestationQuality
    
    if qualityChanged then
        DestroyClientGeometry(self)
    end

    if not self.hasClientGeometry and self.visible then
        CreateClientGeometry(self)
    elseif self.hasClientGeometry and not self.visible then
        DestroyClientGeometry(self)
    end

    local origin = self.coords.origin
    local amount = self.maxRadius > 0 and self.radius / self.maxRadius or 0
    
    -- Apply cloaking effects.
    amount = amount * (1 - self.cloakFraction)
    
    if self.infestationModelArray then
        SetMaterialParameters(self.infestationModelArray, amount, origin, self.maxRadius)
    end
    
    if self.infestationShellModelArray then
        SetMaterialParameters(self.infestationShellModelArray, amount, origin, self.maxRadius)
    end
    
    if self.infestationDecals then
    
        self.infestationMaterial:SetParameter("amount", amount)
        self.infestationMaterial:SetParameter("origin", origin)
        self.infestationMaterial:SetParameter("maxRadius", self.maxRadius)
        
    end

end

-- only called when the infestation actually changed
function Infestation:UpdateInfestables()

    PROFILE("Infestation:UpdateInfestables")

    local smallestRadius = self.radius
    local biggestRadius = self.lastRadius
    -- point is guaranteed on infestation when growing, only shrinking requires another check
    local onInfestation = self.radius > self.lastRadius

    if smallestRadius > biggestRadius then
        smallestRadius, biggestRadius = biggestRadius, smallestRadius
    end
    
    local origin = self.coords.origin
    for _, entity in ipairs(GetEntitiesWithMixinWithinRange("InfestationTracker", self.coords.origin, biggestRadius)) do
    
        local range = (origin - entity:GetOrigin()):GetLength()
        if range >= smallestRadius and range <= biggestRadius then
            entity:UpdateInfestedState(onInfestation)
        end
        
    end

end

function Infestation:GetIsPointOnInfestation(point)

    local onInfestation = false
    
    -- Check radius
    local radius = point:GetDistanceTo(self.coords.origin)
    if radius <= self:GetRadius() then
    
        -- Check dot product
        local toPoint = point - self.coords.origin
        local verticalProjection = math.abs( self.coords.yAxis:DotProduct( toPoint ) )
        
        onInfestation = (verticalProjection < 1)
        
    end
    
    return onInfestation
   
end

local kUpdatesPerFrame = 1
local function UpdateDirtyTableClient()
    Client.SetDebugText("Infestation.OnUpdateClient entry")
    PROFILE("Infestation:UpdateDirtyTableClient")
    
    --DebugPrint("num infestation %s, num dirty %s", ToString(gInfestationSet:GetCount()), ToString(gDirtyInfestationQueue:GetCount()))

    local updatesDone = 0
    while updatesDone < kUpdatesPerFrame do
        local infestation = gDirtyInfestationQueue:Dequeue()
        if not infestation then break end

        if not infestation.destroyed then
            infestation:RenderInfestation(true)
            infestation.lastRadius = infestation.radius
            infestation.lastCloakFraction = infestation.cloakFraction

            updatesDone = updatesDone + 1
        end
    end

    for infestation in gDirtyInfestationQueue:Iterate() do
        if not infestation.destroyed then
            infestation:RenderInfestation(false)
        end
    end
    
    Client.SetDebugText("Infestation.OnUpdateClient exit")
end

local function UpdateDirtyTable()

    PROFILE("Infestation:UpdateDirtyTable")

    for infestation in gDirtyInfestationQueue:Iterate() do

        if not infestation.destroyed then
        
            infestation:UpdateInfestables()
            
            infestation.lastRadius = infestation.radius
            infestation.lastCloakFraction = infestation.cloakFraction
        
        end
    
    end
    
    gDirtyInfestationQueue:Clear()

end

local _currentInfestationScale
local infestation_scale
if Server then
    Event.Hook("UpdateServer", UpdateDirtyTable)
elseif Client then

    Event.Hook("UpdateClient", UpdateDirtyTableClient)

    function Infestation_SyncOptions()
        
        gInfestationQuality = Client.GetOptionString("graphics/infestation", "rich")
        
        Client.SetRenderSetting("infestation", "rich")
        
        -- mark all as dirty to update quality
        for infestation in gInfestationSet:Iterate() do
            gDirtyInfestationQueue:Enqueue(infestation)
        end
        
    end

    local function OnLoadComplete()
        if Client then
            Infestation_SyncOptions()
        end
    end
    
    Event.Hook("LoadComplete", OnLoadComplete)
    
    function Infestation_UpdateForPlayer()
        
        -- Maximum number of blobs to generate in a frame.
        _numBlobsToGenerate = kBlobGenMax

        -- Change the texture scale when we're viewing top down to reduce the
        -- tiling and make it look better.
        local thisFrameInfestationScale
        if infestation_scale then
            thisFrameInfestationScale = infestation_scale
        else
            if PlayerUI_IsOverhead() then
                thisFrameInfestationScale = 0.15
            else
                thisFrameInfestationScale = 0.30
            end
        end
    
        if _currentInfestationScale ~= thisFrameInfestationScale then
            Client.SetRenderSetting("infestation_scale", thisFrameInfestationScale)
            _currentInfestationScale = thisFrameInfestationScale
        end

    end
    
    Event.Hook("Console_infestation_scale", function(value)
        if not Shared.GetCheatsEnabled() and not Shared.GetTestsEnabled() then return end
        infestation_scale = tonumber(value)
    end)

end